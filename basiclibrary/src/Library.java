/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import java.util.*;


public class Library {

    public static void main(String[] args) {
        String greeting = "Welcome to my Java program.";
        System.out.println(greeting);


        // task one
        roll(5);

        // task two
        int[] arr = {2, 5, 8, 5, 4, 5, 9, 8, 1};
        System.out.println("Duplicates : " + containsDuplicates(arr));

        //task three
        int[] array = {2, 3, 4, 5, 6, 7, 8, 9};
        System.out.println("Avg = " + calculatingAverages(array));

        //task four
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        System.out.println(Arrays.toString(arrayOfArrays(weeklyMonthTemperatures)));
        System.out.println(weatherData(weeklyMonthTemperatures));



        ////////////////////lab-3



        //task 2
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    public static void roll(int n) {
        int[] newArray = new int[n];
        for (int i = 0; i < newArray.length; i++) {

            int ranRoll = (int) Math.ceil(Math.random() * 6);
            newArray[i] = ranRoll;
        }
        System.out.println(Arrays.toString(newArray));
    }


    public static boolean containsDuplicates(int[] arr) {
        boolean x;
        Set<Integer> array = new HashSet<Integer>();
        for (int i : arr) {
            array.add(i);
        }
        if (array.size() == arr.length) {
            return false;
        } else {
            return true;
        }
    }


    public static double calculatingAverages(int[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum = sum + i;
        }
        return sum / arr.length;
    }


     public static int[] arrayOfArrays(int[][] arr) {
        double lowestAvg = calculatingAverages(arr[0]);

        int index = 0;
        for (int i = 1; i < arr.length; i++) {
            double lowestAvgCheck = calculatingAverages(arr[i]);
            if (lowestAvgCheck < lowestAvg) {
                lowestAvg = lowestAvgCheck;
                index = i;
            }
        }
        return arr[index];
    }


    ///////////// lab-3////

    public static int[] weatherData(int[][] weatherArray){
        Set<Integer> weatherSet = new HashSet<Integer>();

        for (int[] ints : weatherArray){
            for(int tempr : ints){
                weatherSet.add(tempr);
            }
        }

        int minTempr = Collections.min(weatherSet);
        int maxTempr=Collections.max(weatherSet);

                for (int i = minTempr ; i < maxTempr ; i++){
                    if(!weatherSet.contains(i)){
                       return ("Never saw temperature:" + i);
                    }
                }
                return (minTempr + maxTempr );
    }

    public static String tally(List<String> votes) {

        HashSet<String> votedItems = new HashSet<>();
        votedItems.addAll(votes);

        int numVotes = 0;
        String winner = null;

        for (String item : votedItems) {
            int count = Collections.frequency(votes, item);
            if (numVotes < count) {
                numVotes = count;
                winner = String.format("%s received the most votes!", item);
            } else if (numVotes == count) {
                winner = "re-vote is needed";
            }
        }

        return winner;
    }



}


